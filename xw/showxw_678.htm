 
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>New Page 1</title>
</head>

<body>

<p align="center"> <font size="6" face="宋体" color="#FF0000"> 在Authorware中MessageBox的妙用</font><font face="宋体"> 
  </font></p>
<hr>
<table>
<tr><td>
广西&nbsp; 甘承凯<br><br>&nbsp; &nbsp; 凡是Windows用户，肯定都很熟悉MessageBox（消息对话框）；一次次在消息对话框中对“确定”、“取消”等按钮的鼠标单击，使我们得以自如地遨游于Windows图形世界中。 在Windows各类语言编程中，MessageBox函数的使用，是所有编程者都必须要掌握的；在Authorware应用程序中，如果能用上MessageBox，则不仅仅使应用程序更符合Windows规范，同时还将极大地简化编程过程和应用程序本身。Authorware 5 Attain 中，提供了一个MessageBox知识对象，可以方便地实现消息对话框；但是，Authorware 5 Attain以下的版本中，能否实现消息对话框呢？答案是肯定的。<br><br>&nbsp; &nbsp; 本文将介绍：在Authorware 5 Attain以下的版本中，如何引发消息对话框、如何定制消息对话框、如何接收用户在消息对话框里的鼠标或按键操作信息；并附赠笔者自编的一个“联机帮助”实用例程。<br><br>一．引发消息对话框<br><br>&nbsp; &nbsp; 要想在Authorware中引发消息对话框，就必须调用Windows API（Windows应用程序设计接口，实际上是一组能控制整个计算机或计算机某个特定功能的例程，正是这些例程，形成了应用程序与计算机软硬件的接口）。在Authorware中，调用Windows API函数的一般步骤如下：<br><br>1. 载入Windows API函数。<br><br>2. 在计算图标中编写代码。<br><br>&nbsp; &nbsp; 这里，我们需要调用的是：Windows API函数MessageBox。具体操作过程如下：（以Authorware2.0为例，这里介绍的方法，适用于Authorware2.0及其以上的各种版本。）<br><br>&nbsp; &nbsp; 第一步，从菜单中选择Data→Load Function...，在弹出的“Load Function”对话框中，选择C:\Windows\system\winapi.ucd（在Authorware4.0及其以上的版本中，使用此法时，则是选择C:\Windows\system\winapi.u32），单击“OK”按钮。<br><br>&nbsp; &nbsp; 在弹出的‘Custom Functions Referenced in “Winapi.ucd”’对话框中，选择MessageBox函数，单击“Load”按钮，将MessageBox函数载入应用程序（实际上，MessageBox函数并未真正载入应用程序，而只是有一条链接被连接到了包含代码的文件中）。<br><br>&nbsp; &nbsp; 第二步，从图标工具栏拖一个计算图标到流程线上，改名为“Show MessageBox”， 在其中输入如下代码（或将它们复制并粘贴到计算图标里去也行），即可引发消息对话框：<br><br>&nbsp;  HWND :=WindowHandle<br><br>&nbsp;  LPCSTR:=&quot;在此输入消息对话框正文&quot;<br><br>&nbsp;  LPCSTR lpCaption:=&quot;在此输入消息对话框标题&quot;<br><br>&nbsp;  UINT:=&quot;0x0000&quot;<br><br>&nbsp;  int:=MessageBox(HWND, LPCSTR,LPCSTR lpCaption, UINT)<br><br>&nbsp;  二．定制消息对话框<br><br>&nbsp; &nbsp; 计算图标“Show MessageBox”中的代码，定制了一个标题为：“在此输入消息对话框标题”，正文为：“在此输入消息对话框正文”，包括一个“确定”按钮的消息对话框。<br><br>&nbsp; &nbsp; 定制消息对话框用到的各项参数及代码说明如下：<br><br>&nbsp; &nbsp; HWND是程序主窗口的窗口句柄，藉以指出消息对话框将在其中出现的那个窗口的句柄。 <br><br>&nbsp; &nbsp; HWND :=WindowHandle，即指定当前Authorware展示窗口，作为将在其中显示消息对话框的窗口（WindowHandle是一个Authorware系统变量，包含当前Authorware展示窗口的窗口句柄）。<br><br>&nbsp; &nbsp; LPCSTR是一个指向字符串常量的长指针，该字符串是您希望在消息对话框中显示的正文，可任意输入中文、英文；如果您想输入多行文字，请在行与行之间嵌入换行符Return,代码示例如下：<br><br>&nbsp; &nbsp; LPCSTR:=&quot;第一行文字&quot;^Return^&quot;第二行文字&quot;<br><br>&nbsp; &nbsp; LPCSTR lpCaption也是一个指向字符串常量的长指针，该字符串是消息对话框的标题，同样可以任意输入中文、英文。<br><br>&nbsp; &nbsp; UINT是一个字符串常量，该字符串的值决定消息对话框里边，包括的按钮、图标等标志情况；下边列出UINT部分常用值及其对应消息对话框的情况，以便于读者查阅。<br><br>UINT常用值 消息对话框中对应包括<br><br>0x0000： “确定”按钮。<br><br>0x0001： “确定”、“取消”按钮。<br><br>0x0002： “终止”、“重试”、“忽略”按钮。<br><br>0x0003： “是”、“否”、“取消”按钮。<br><br>0x0004： “是”、“否”按钮。<br><br>0x0005： “重试”、“取消”按钮。<br><br>0x0008： “取消”、“帮助”按钮。<br><br>0x0010： “确定”、“取消”、“帮助”按钮。<br><br>0x0014： “确定”、“取消”、“帮助”、“终止”、“重试”按钮。<br><br>0x0016： “确定”按钮、“X”号图标。<br><br>0x0018： “终止”、“重试”、“忽略”按钮、“X”号图标。<br><br>0x0020： “是”、“否”按钮、“X”号图标。<br><br>0x0021： “重试”、“取消”按钮、“X”号图标。<br><br>0x0024： “取消”、“帮助”按钮、“X”号图标。<br><br>0x0026： “确定”、“取消”、“帮助”按钮、“X”号图标。<br><br>0x0030： “确定”、“取消”、“帮助”、“终止”、“重试”按钮、“X”号图标。<br><br>0x0032： “确定”按钮、“？”号图标。<br><br>0x0034： “终止”、“重试”、“忽略”按钮、“？”号图标。<br><br>0x0036： “是”、“否”按钮、“？”号图标。<br><br>0x0040： “取消”、“帮助”按钮、“？”号图标。<br><br>0x0042： “确定”、“取消”、“帮助”按钮、“？”号图标。<br><br>0x0046： “确定”、“取消”、“帮助”、“终止”、“重试”按钮、“？”号图标。<br><br>0x0048： “确定”按钮、“！”号图标。<br><br>0x0050： “终止”、“重试”、“忽略”按钮、“！”号图标。<br><br>0x0052： “是”、“否”按钮、“！”号图标。<br><br>0x0056： “取消”、“帮助”按钮、“！”号图标。<br><br>0x0058： “确定”、“取消”、“帮助”按钮、“！”号图标。<br><br>0x0062： “确定”、“取消”、“帮助”、“终止”、“重试”按钮、“！”号图标。<br><br>0x0064： “确定”按钮、“i”号图标。<br><br>0x0066： “终止”、“重试”、“忽略”按钮、“i”号图标。<br><br>0x0068： “是”、“否”按钮、“i”号图标。<br><br>0x0072： “取消”、“帮助”按钮、“i”号图标。<br><br>0x0074： “确定”、“取消”、“帮助”按钮、“i”号图标。<br><br>0x0078： “确定”、“取消”、“帮助”、“终止”、“重试”按钮、“i”号图标。<br><br>三．接收用户在消息对话框里的鼠标或按键操作信息<br><br>&nbsp; &nbsp; 变量int记录MessageBox函数的返回值，该值为一个整数，指示出当消息对话框出现于屏幕时，用户以鼠标或按键方式选择了哪个按钮。下边列出了MessageBox函数可能的返回值：<br><br>用户选择了“确定” 按钮。 <br><br>用户选择了“取消” 按钮。 <br><br>用户选择了“终止” 按钮。 <br><br>用户选择了“重试” 按钮。 <br><br>用户选择了“忽略” 按钮。 <br><br>用户选择了“是” 按钮。 <br><br>用户选择了“否” 按钮。 <br><br>四．“联机帮助” 实用例程<br><br>&nbsp; &nbsp; 下边通过一个实用例程，说明在Authorware中，消息对话框的妙用。<br><br>&nbsp; &nbsp; 这是一个很简单、却又很实用的例子，将利用消息对话框来为最终用户提供文字性的操作提示；您可以把它用在自己的应用程序中，为用户提供文字性的联机帮助，而不必去编写联机帮助文件。为程序的普适性起见，仍然以Authorware2.0为例，您当然也可以使用 Authorware2.0或其以上的各种版本。需要指出的一点是：Authorware2.0中没有Language类内部函数，您当然可以在Authorware的较高版本中，使用“If-Then”一类语句替代某部分程序。程序流程图如下：<br><br>程序说明如下：<br><br>&nbsp; &nbsp; 在展示窗口中，“File”菜单下建立“Exit”、“help”两菜单项 。<br><br>&nbsp; &nbsp; 当用户单击“Exit” 菜单项时，弹出“退出本程序”消息对话框，询问用户：“您是否真的要退出本程序？”，若用户选择“是”，则退出程序，若用户选择“否”，则程序将返回到用户单击“Exit” 菜单项前的状态，继续执行下去。<br><br>计算图标“ExitBox”中代码如下：<br><br>HWND :=WindowHandle<br><br>LPCSTR:=&quot;您是否真的要退出本程序?&quot;<br><br>LPCSTR lpCaption:=&quot;退出本程序&quot;<br><br>UINT:=&quot;0x0052&quot;<br><br>int:=MessageBox(HWND, LPCSTR,LPCSTR lpCaption, UINT)<br><br>UINT:=&quot;0x0052&quot;意味着：消息对话框里，将包含“是”、“否”按钮、“！”号图标。<br><br>计算图标“yes”中代码如下：<br><br>Quit()<br><br>群组图标“no”保持为空。<br><br>&nbsp; &nbsp; 决策判断图标“ExitOrNot”中设置情况如下图：（其中，Calculated Path设置为int-5，这是因为：若用户选择“是”，则变量int将返回6，路径int-5=6-5=1，执行分支路径“yes”，若用户选择“否”，则int将返回7，路径int-5=7-5=2，执行分支路径“no”。）<br><br>&nbsp; &nbsp; 当用户单击“help” 菜单项时，有两种情况：<br><br>&nbsp; &nbsp; 第一种情况（help=0），弹出“启用联机帮助”消息对话框，询问用户：“您真的要启用联机帮助吗？”，若用户选择“是”，则程序将转而执行计算图标“(int=6&amp;help=0&amp;power&lt;&gt;0)|(int=6&amp;help=1&amp;power&lt;&gt;1)”中的代码：<br><br>help:=~help<br><br>令help=1，联机帮助置为开启状态，若用户选择“否”，则程序将返回到用户单击“help” 菜单项前的状态，继续执行下去。<br><br>第二种情况（help=1），弹出“关闭联机帮助”消息对话框，询问用户：“您真的要关闭联机帮助吗？”若用户选择“是”，则程序将转而执行计算图标“(int=6&amp;help=0&amp;power&lt;&gt;0)|(int=6&amp;help=1&amp;power&lt;&gt;1)”中的代码：<br><br>help:=~help<br><br>令help=0，联机帮助置为关闭状态，若用户选择“否”，则程序将返回到用户单击“help” 菜单项前的状态，继续执行下去。<br><br>计算图标“helpkey”中，代码如下：<br><br>helpkey:=help+1<br><br>&nbsp; &nbsp; 决策判断图标“OnOrOff”中， Calculated Path设置为helpkey，若help=1，则路径helpkey=2，执行分支路径“关闭联机帮助”， 若help=0，则路径helpkey=1，执行分支路径“启用联机帮助”。<br><br>计算图标“启用联机帮助”中，代码如下：<br><br>HWND :=WindowHandle<br><br>LPCSTR:=&quot;您真的要启用联机帮助吗?&quot;<br><br>LPCSTR lpCaption:=&quot;启用联机帮助&quot;<br><br>UINT:=&quot;0x0036&quot;<br><br>int:=MessageBox(HWND, LPCSTR,LPCSTR lpCaption, UINT)<br><br>power:=1<br><br>UINT:=&quot;0x0036&quot;意味着：消息对话框里，将包含“是”、“否”按钮、“?”号图标。<br><br>计算图标“关闭联机帮助”中，代码如下：<br><br>HWND :=WindowHandle<br><br>LPCSTR:=&quot;您真的要关闭联机帮助吗?&quot;<br><br>LPCSTR lpCaption:=&quot;关闭联机帮助&quot;<br><br>UINT:=&quot;0x0020&quot;<br><br>int:=MessageBox(HWND, LPCSTR,LPCSTR lpCaption, UINT)<br><br>power:=0<br><br>UINT:=&quot;0x0020&quot;意味着：消息对话框里，将包含“是”、“否”按钮、“X”号图标。<br><br>&nbsp; &nbsp; 变量power用来记录用户最近一次单击“help”菜单项时，出现的是哪一个消息对话框。比如说，如果power=1，则表示出现的是消息对话框“启用联机帮助”， 如果power=0，则表示出现的是消息对话框 “关闭联机帮助”。 假如缺少了变量power，若用户在消息对话框 “关闭联机帮助”或“启用联机帮助”中选择“是”，则程序将不断执行计算图标“(int=6&amp;help=0&amp;power&lt;&gt;0)|(int=6&amp;help=1&amp;power&lt;&gt;1)”中的代码：<br><br>help:=~help<br><br>变量int、help、power三者的值结合起来判断，决定了什么时候help值应当被切换。<br><br>&nbsp; &nbsp; 您可以在此程序的基础上，任意添加自己的代码，实现各种各样的功能。只要在程序的任意位置，一个计算图标里输入代码：helptext=1，若help=1（联机帮助已被用户置为开启状态），即可调用帮助主题一；程序将转而执行计算图标“help=1&amp;helptext=1”中的代码：<br><br>HWND :=WindowHandle<br><br>LPCSTR:=&quot;这是帮助主题一&quot;<br><br>LPCSTR lpCaption:=&quot;帮助主题一&quot;<br><br>UINT:=&quot;0x0064&quot;<br><br>int:=MessageBox(HWND, LPCSTR,LPCSTR lpCaption, UINT)<br><br>UINT:=&quot;0x0064&quot;意味着：消息对话框里，将包含“是”、“否”按钮、“i”号图标。<br><br>&nbsp; &nbsp; 同样的道理，若令helptext=2，则有可能调出帮助主题二（只要help=1）。按照类似的方法，您可以轻而易举地添加、调用帮助主题三、四、五……。
</td></tr>
</table>
<hr>

<p align="right">

20001121102805
<div align="center"><a href="xwpl_668.htm">我来说两句</a></div>
</body> 
 
</html> 
