 
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>New Page 1</title>
</head>

<body>

<p align="center"> <font size="6" face="宋体" color="#FF0000"> V001 - 几个常用的变数与函数 </font><font face="宋体"> 
  </font></p>
<hr>
<table>
<tr><td>
Random <br><br>number:=Random(min, max, units) <br><br>在min与max两个数值之间　产生一个乱数　其单位为units所指定的位数　 <br><br>Random(1, 10, 1)表示从1到10之间　产生一个整数的乱数　 <br><br>Random(1, 5, 0.1)表示从1到5之间　产生一个含一位小数的乱数　 <br><br>MouseDown <br><br>MouseDown <br><br>如果使用者按滑鼠的左方按键　此变数值为真　 <br><br>SoundPlaying <br><br>SoundPlaying <br><br>本变数值为真表示目前系统正在播放声音　否则为假　 <br><br>MoviePlaying <br><br>MoviePlaying <br><br>本变数值为真表示目前正在播映数位影片　它可以用於同步的控制　当影片正在播映时　若设定此变数给一个声音对话方块中的Start Playing When TRUE栏位　表示当影片开始播映时　就同时播放声音　结果就变成影片的配乐　可以省去重新编辑影片的时间　 <br><br>Movable <br><br>Movable@&quot;Icon Title&quot; <br><br>当指定图示中的图形可以被移动　则本变数值为真　其最主要的用法是设定图形是否可以移动　若设定其值为假　则无法移动图形　否则皆可以移动图形　 <br><br>FullDate <br><br>FullDate <br><br>完整的日期的名称　依照使用者所设定地区的格式为准　 <br><br>FullTime <br><br>FullTime <br><br>现在的时间　可以是12小时制或是24小时制显示　依照使用者於Windows Control Panel的设定　以12小时制(4:55:56)或24小时制(16:55:56)显示时间　 <br><br>Quit <br><br>Quit(options) <br><br>依照 options 来跳离执行的动作　选项有下列三种　 <br><br>数字 结果 <br><br>0 跳到程式管理员之下如果它是被主程式所乎叫　则会回到主程式中 <br><br>1 跳到程式管理员之下 <br><br>2&nbsp; 跳到 DOS 之下　&nbsp; <br><br>EntryText <br><br>EntryText@&quot;Icon Title&quot; <br><br>在文字输入式交谈中　使用者所输入的字　在进入交谈时　变数就会马上被更新　而且每经过一个回应也会更新它的值　 <br><br>PresetEntry <br><br>PresetEntry <br><br>若在进入交谈之前　先给这个变数一个字串值　本变数之值会自动出现在使用者回应的文字输入区域之内　使用者可以输入其它的文字即可　或者也可以修改PresetEntry的文字　以输入日期为例　我们可以在进入交谈之前　先设定PresetEntry的值为“民国　年　月　日”　所以使用者只要填入数字即可　 <br><br>IconTitle <br><br>string := IconTitle(IconID) <br><br>查询某个图示编号IconID所相对应的图示名称　如果直接在同一图示上使用此变数　则可以不需要引数　而变数的内容表示此图示的名称　 <br><br>GetLine <br><br>string := GetLine(string, n) <br><br>string := GetLine(string, n, m) <br><br>取得字串中第n行的字串　加入m引数表示取得第n行到第m行中间的字串　引数delim则表示此字元为新的隔行字元（一般的隔行字元为Return）　 <br><br>DeleteLine <br><br>string := DeleteLine(string, n) <br><br>string := DeleteLine(string, n, m) <br><br>string := DeleteLine(string, n, m, delim) <br><br>删除原字串之第n行子字串　若加入m引数　则表示将原字串删除第n到m行　引数delim则表示此字元为新的隔行字元（一般的隔行字元为 Return）　 <br><br>InsertLine <br><br>string := InsertLine(string, n, newstring) <br><br>string := InsertLine(string, n, newstring,delim) <br><br>将新字串插入原字串第n行之後　如果n为0　则新字串成为第一行　引数 delim则表示此字元为新的隔行字元（一般的隔行字元为 Return）　 <br><br>GetWord <br><br>string := GetWord(n, string) <br><br>取得字串中第n个字　一般来说英文字以空白做为间隔　如果找不到则传回空白字串　 <br><br>GetNumber <br><br>number := GetNumber(n, string) <br><br>字串中若含有数值　此变数表示取得字串中第n个数字的数值　如果找不到则传回来的值为0　 <br><br>LineCount <br><br>number := LineCount(string) <br><br>number := LineCount(string, delim) <br><br>指定字串中的行数　但不包含最後的空白行　引数delim则表示此字元为新的隔行字元　一般以Return为隔行字元　利用此函数delim功能　可指定特殊字元为隔行字元　如TAB或逗点　 <br><br>ReadExtFile <br><br>string := ReadExtFile(filename) <br><br>读取指定的档案filename所有文字内容　并存成一个字串放在string变数中　但是档案的内容　必须以 ASCII 的格式建立　 <br><br>WriteExtFile <br><br>WriteExtFile(filename, string) <br><br>number := WriteExtFile(filename, string) <br><br>将string写到filename文字档案中　但是与AppendExtFile 不太相同的是它会将原来的文字覆盖　所以在使用WriteExtFile函数时　请特别注意　同样的　如果此文字档案不存在　则系统会自动产生档案　 <br><br>AppendExtFile <br><br>AppendExtFile(filename, string) <br><br>number := AppendExtFile(filename, string) <br><br>将string加在文字档案的最後面　此函数与WriteExtFile不太相同　因为WriteExtFile会产生档案　而AppendExtFile不会产生新档案　它只是找到档案　然後在档案最後将字串加上　 <br><br>如果找不到此档案名称　则系统会自动产生此档案　这是个很特殊的功能　如果想要为新的使用者产生档案　直接使用这个功能即可　 <br><br>RecordLocation <br><br>RecordLocation <br><br>Authorware在执行的过程中会记录下一些系统的状态　此变数即表示系统记录Record的路径位置　当使用者使用跳跃的功能时　A3W允许记录原来的状态　这个记录的位置就是RecordLocation的位置　这个目录在安装A3W时　就会自动产生<br><br>FileLocation <br><br>FileLocation <br><br>指出目前执行中档案的路径位置　在引号中的字串特别要注意的地方是反斜线的写法　在此地一定要多加上一个反斜线　因为这个符号在引号中有特殊的意义　 <br><br>SearchPath <br><br>SearchPath <br><br>指定外部搜寻档案的路径　在File Setup指令的对话方块之中　有个栏位含有搜寻路径的位置　如果在栏位中输入搜寻路径後　SearchPath变数中的值就会与它相同　就是说变数的值即为栏位中的字串　 <br><br>Eval <br><br>result := Eval(expression) <br><br>result := Eval(expression, decimal) <br><br>result := Eval(expression, decimal,separator) <br><br>函数将会审视表示式expression　然後将结果值放置到result中　result将为一个表示式　若表示式有任何的问题时　系统变数EvalStatus与EvalMessage将会存放此值　若想要在表示式中放置指定值的式子时　请使用EvalAssign函数　後面的二个引数decimal与separator可用来指定小数位的分隔字元与位数　 <br><br>EvalAssign <br><br>result := EvalAssign(expression) <br><br>result := EvalAssign(expression, decimal) <br><br>result := EvalAssign(expression, decimal, separator) <br><br>此函数与Eval大致相同　只是它主要用来做指定值之用　 <br><br>Test <br><br>Test(condition, true expression, false expression) <br><br>这个指令与if...then有异曲同工之妙　condition为判断式　若此判断式为真　则执行true expression中的表示式或指令　否则执行false expression之中的表示式或指令　 <br><br>UpperCase <br><br>string := UpperCase(string) <br><br>将字串中所有的小写字元改为大写字元　 <br><br>LowerCase <br><br>string := LowerCase(string) <br><br>将字串中所有的大写字元改成为小写字元　 <br><br>Capitalize <br><br>String := Capitalize(string) <br><br>String := Capitalize(string,1) <br><br>将指定字串中全部或第一个字母改为大写文字　 <br><br>Restart <br><br>Restart() <br><br>重新执行本程式　 <br><br>Checked <br><br>Checked@&quot;Icon Title&quot; <br><br>图示之中含有按钮时　若此按钮的状态为设定按钮中四种状态之一的结果时　本变数的值将为真　 <br><br>JumpFile　JumpFileReturn <br><br>JumpFile(&quot;filename&quot;) <br><br>JumpFile(&quot;filename&quot;, &quot;variable1, ...&quot;) <br><br>JumpFile(&quot;filename&quot;,&quot;variable1,...&quot;,&quot;directory&quot;) <br><br>JumpFileReturn(&quot;filename&quot;) <br><br>JumpFileReturn(&quot;filename&quot;, &quot;variable1, ...&quot;) <br><br>JumpFileReturn(&quot;filename&quot;,&quot;variable1,...&quot;, &quot;directory&quot;) <br><br>表示呼叫 A3W 的程式　JumpFileReturn虽然也是呼叫另外一个程式　但是系统会记得原呼叫的程式为何　当使用者离开被呼叫的程式时　就会回到原来的程式上继续执行　 <br><br>如果想要与Quit函数配合使用　记得将Quit函数的参数设定为0　 <br><br>第二个引数主要是给程式中间传递之用　可以指定那几个变数需要传给被呼叫的程式使用　这些变数就可以从原始的程式带到被呼叫的程式上　 <br><br>想要设定变数的名称时　有一个简便的方法　如果这些变数的名称都类似　则可以配合万用字元 * 使用　所有符合的变数都会传到新的程式中　 <br><br>最後一个引数是设定记录record的目录　系统内定的目录为 Windows\A3w_data　可以改变这个目录　如果程式应用在网路上　使用者非常众多　这个引数就有必要存在　因为您可以指定每一个使用者一个目录　这个目会储存此位使用者所使用程式的过程　也就是记录档案会写在这个目录之中　如此当使用者开机时　就会读到自己的记录档案　 <br><br>JumpOut　JumpOutReturn <br><br>JumpOut(&quot;program&quot;) <br><br>JumpOut(&quot;program&quot;, &quot;document&quot;) <br><br>JumpOutReturn(&quot;program&quot;) <br><br>JumpOutReturn(&quot;program&quot;, &quot;document&quot;) <br><br>这二个函数的功能与JumpFile相似　但是它们所呼叫的不是A3W程式　而是任何其它的程式　在program中所填入的就是这个程式的名称与路径位置　 <br><br>第二个引数document则是传给新程式的文件　如果您所呼叫的是一个Word程式　就可以传给它一个文字档案　如此当Word开启後　也会同时开启这个文字档案　当呼叫程式出现错误时　可以查询IOStatus　IOMessage看看到底错误在何处　 <br><br>Round <br><br>number := Round(x, decimals) <br><br>以decimals来指定小数位数　然後将值以四舍五入的方式传回新的值　 <br><br>INT <br><br>number := INT(x) <br><br>将x去掉小数之後传回其整数值　 <br><br>Pi <br><br>Pi <br><br>圆周率　3.1415926536...　 <br><br>Return <br><br>Return <br><br>代表键盘上的Return字元　 <br><br>Tab <br><br>Tab <br><br>代表键盘上的Tab字元　 <br><br>ChoiceNumber <br><br>ChoiceNumber@&quot;Icon Title&quot; <br><br>回应交谈图示的图示代号　图示之编号从左而右由1开始计算　 <br><br>PressKey <br><br>PressKey(&quot;keyname&quot;) <br><br>本函数执行之後就好像使用者按了keyname之键一样　 <br><br>Key <br><br>Key <br><br>使用者所按的键名（包含功能键与数字键）　 <br><br>KeyNum <br><br>KeyNum <br><br>使用者所按的按键数值　Key代表的是字串　而KeyNum则为数值型式　 <br><br>PathPosition <br><br>PathPosition@&quot;Icon Title&quot; <br><br>若图示中的图形有指定的移动路径　则本变数值为图形所在路径上的位置　 <br><br>AllSelected <br><br>AllSelected@&quot;Icon Title&quot; <br><br>当决策图示中所有的子图示全部被选过後　本变数即为真　否则为假　 <br><br>PathCount <br><br>PathCount@&quot;Icon Title&quot; <br><br>决策图示中的子图示数目　 <br><br>PathSelected <br><br>PathSelected@&quot;Icon Title&quot; <br><br>决策图示中所分歧到子图示的位置（上一次所选到的位置）　位置以数目字表示　从左而右从数目字1算起　 <br><br>RepCount <br><br>RepCount@&quot;Icon Title&quot; <br><br>决策图示重覆执行的次数　 <br><br>SelectedEver <br><br>SelectedEver@&quot;Icon Title&quot; <br><br>如果变数中的图示曾被选到过　则变数为真　 <br><br>ClickX　ClickY <br><br>ClickX <br><br>ClickY <br><br>ClickX为使用者按下滑鼠左键时　游标所在的萤幕横座标　ClickY表示使用者按下滑鼠左键时　游标所在的萤幕纵座标　 <br><br>Initialize <br><br>Initialize() <br><br>Initialize(variable1,..., variable10) <br><br>将指定的所有变数回覆到其原来的初值　若使用指定变数　最多一次只可以使用10个变数<br><br>
</td></tr>
</table>
<hr>

<p align="right">

20001114155239
<div align="center"><a href="xwpl_348.htm">我来说两句</a></div>
</body> 
 
</html> 
