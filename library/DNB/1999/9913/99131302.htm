<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style type="text/css">
<!--
BODY  {font-size : 12pt; font-weight : normal; font-style : normal; text-decoration : none;}
P  {font-size : 12pt;}
A  {font-size : 9pt; color: blue; text-decoration : none;}
A:Visited  {font-size : 9pt; color: blue; text-decoration : none;}
A:Active  {font-size : 9pt; color: red; text-decoration : none;}
A:Hover  {font-size : 9pt; color: blue; text-decoration : underline;}
TD  {font-size : 12pt;}
-->
</style>
<title>在DELPHI中用线程排序</title>
</head>

<body bgcolor="#FFFFFF">
<div align="center">
  <div align="center">
    <center>
      <table BORDER="0" WIDTH="715" HEIGHT="80" ALIGN="center">
  <tr>
    <td WIDTH="221" HEIGHT="69"><a HREF="../../../../www_lpzx_edu_default.html"><img SRC="http://www.lpzx.edu.cn/images/title01.gif" WIDTH="166"
    HEIGHT="77" ALT="电脑报LOGO" BORDER="0"></a></td>
    <td WIDTH="484" HEIGHT="69"><p ALIGN="center"><A
    href="netschool/index.htm" TARGET="_top"><IMG
    SRC="http://www.lpzx.edu.cn/netschool/wlxy.jpg" BORDER="0"
    WIDTH="468" HEIGHT="60"></A><br>
    中文十大网站之一，广告效果极佳，欢迎在此<a href="bill/index.htm">刊登广告</a>。 
    </td>
  </tr>
</table>
</center></div>
  <center>

<table border="0" width="700" cellspacing="0" cellpadding="4">
  <tr>
    <td width="100%" valign="top" align="center"><div align="center"><center><table border="0"
    width="680" cellspacing="0" cellpadding="4" BGCOLOR="#E8e8e8">
      <tr>
        <td width="672" valign="top" bgcolor="#55002B"><p align="center"><font face="黑体"
        color="#FFFFFF"><strong>在DELPHI中用线程排序</strong></font></td>
      </tr>
      <tr VALIGN="BOTTOM" ALIGN="LEFT">
        <td width="672" background="http://www.lpzx.edu.cn/images/%B5%D7%CE%C6.gif"><p align="left">　　在数据处理量很大的情况下，如何在数据处理的同时响应用户操作？Windows95/98和WindowsNT作为多线程的多任务操作系统，其调度单元是线程，即线程是系统分配处理器时间资源的基本单元，所以我们可以利用线程实现在处理大批量数据的同时响应用户操作。<br>
        　　DELPHI作为一个优秀的开发平台，对开发多线程应用程序提供了强有力的支持，即可直接利用32位Windows环境提供的Win32API接口函数CreateThread，也可利用DELPHI中提供的BeginThread函数。在下面例子中，正是使用了DELPHI提供的TThread类。<br>
        　　<strong>一．基本的方法如下：</strong><br>
        　　1．从Tthread类派生一个新类。(创建TSortThread类)<br>
        　　2．定义新类的Create方法。<br>
        　　3．定义新类的Execute方法，并在Execute方法中插入线程运行时执行的代码。<br>
        　　4．引用类方法创建实例。<br>
        　　<strong>二．例子的详细代码及说明：</strong><br>
        　　首先，新建一个单元，保存为mysort.pas.在此单元中，我们创建了一个TSortThread类，它从TThread类中继承而来，所以当我们在程序中创建这个类的一个实例时，也就是创建了一个新的线程。<br>
        　　接着，在该类中定义一个Sort方法，用来对数组进行排序，同时TSortThread类超越了TThread类的构造方法Create和Execute，在execute方法中，调用了对数组进行排序的Sort方法。具体代码如下：<br>
        　　unitmysort;<br>
        　　interface<br>
        　　usesClasses;//TThread类在Classes中被定义。<br>
        　　type<br>
        　　PSortArray=TSortArray;<br>
        TSortArray=array.[0..MaxIntdivSize<br>
        Of(Integer)－1]ofInteger;<br>
        　　{此处定义了TsortThread类}<br>
        　　TSortThread=class(TThread)<br>
        　　Private<br>
        　　{在TSortThread类中定义了如下几个私有变元}<br>
        　　FSortArray:PSortArray;<br>
        　　FSize:Integer;<br>
        　　FA,FB,FI,FJ:Integer;<br>
        　　Protected<br>
        　　{类TSortThread超越了类Tthread的Execute方法}<br>
        　　procedure Execute;override;<br>
        　　{类TsortThread添加了一个Sort方法}<br>
        　　procedure Sort(varA:arrayofInteger);<br>
        　　public<br>
        　　{类TSortThread超越了类Tthread的构造方法}<br>
        　　constructorCreate(varSortArray:arrayofInteger);<br>
        　　end;<br>
        　　implementation<br>
        　　constructorTSortThread.Create(varSortArray:arrayofInteger);<br>
        　　begin<br>
        　　FSortArray:=@SortArray;<br>
        　　FSize:=High(SortArray)－Low(SortArray)＋1;<br>
        　　FreeOn Terminate:=True;<br>
        　　inheritedCreate(False);<br>
        　　end;<br>
        　　{当线程开始时，Execute方法将被调用。}<br>
        　　procedure TSortThread.Execu<br>
        te;<br>
        　　begin<br>
        　　Sort(Slice(FSortArray,FSize));<br>
        　　end;<br>
        　　{下面实现了冒泡法排序}<br>
        　　procedure TSortThread.Sort(varA:arrayofInteger);<br>
        　　var<br>
        　　I,J,T:Integer;<br>
        　　begin<br>
        　　for I:=High(A)downto Low(A) do<br>
        　　for J:=Low(A)to High(A)－1 do<br>
        　　if A[J]&gt;A[J＋1] then<br>
        　　begin<br>
        　　T:=A[J];<br>
        　　A[J]:=A[J＋1];<br>
        　　A[J＋1]:=T;<br>
        　　if Terminated then Exit;<br>
        　　end;<br>
        　　end;<br>
        　　end<br>
        　　最后，在用户应用程序的implementation处加入usesmysort,在执行排序的地方加入TQuickSortthread.Create(SortArray)，其中SortArray为一实际的数组。这样就可以用线程实现排序，在排序过程中，用户不必等到排序结束就可以执行其它操作。这种用多线程实时响应用户操作方法在涉及大量数据处理的应用程序中显得尤为重要。<br>
        <strong>(湖南 刘一帆)</strong></p>
        <p align="right"><font COLOR="#000000">本文出自：<a href="index.htm">《电脑报》1999年04月5日第13期</a></font> 
        </td>
      </tr></table>
            </center>
          </div>
        <CENTER>
          <SCRIPT>
		document.write("<a href="library/DNB/1999/show_stats.htm%5C%22" target=sxrl>"); 
		document.write("<img src=\"http://refer.gznet.com/cgi-bin/rl_refer.cgi?UID=10015861&refer="+escape(top.document.referrer)+"\" width=25 height=15 border=0 alt=\"《电脑报》栏目排行榜\">"); 
		document.write("</a>"); 
	</SCRIPT>
          <NOSCRIPT> </NOSCRIPT>
        </CENTER>
        <NOSCRIPT>
        <DD ALIGN="center">
          <CENTER>
            <A
  HREF="http://view.gznet.com/cgi-bin/rl_views.cgi?UID=10015861 target=sxrl&gt;"><IMG
  SRC="http://refer.gznet.com/cgi-bin/rl_refer.cgi?UID=10015861&amp;refer=http%3A//www.cpcw.com/NoJavaScript"
  WIDTH="25" HEIGHT="15" BORDER="0" ALT="《电脑报》栏目排行榜"></A>
          </CENTER>
        </DD>
        </NOSCRIPT> 
      

</TABLE></CENTER></DIV></body></html>